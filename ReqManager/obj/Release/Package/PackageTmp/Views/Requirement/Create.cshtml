@model ReqManager.ViewModels.RequirementViewModel

@{
    ViewBag.Title = "Register new Requirement";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.Hidden("ProjectID", Request.Url.Segments[3].ToString())
    <div class="form-group">
        <input type="submit" value="Create" class="btn btn-success" />
    </div>
    <div id="tabs">
        <ul>
            <li><a href="#req">Requirement</a></li>
            <li><a href="#des">Description</a></li>
        </ul>
        <div id="req">
            <div class="form-horizontal">
                <div class="col-lg-5">

                    <div class="form-group">
                        @Html.LabelFor(model => model.ProjectID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("ProjectID", null, htmlAttributes: new { @class = "form-control select2" })
                            @Html.ValidationMessageFor(model => model.ProjectID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Title", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.title, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.title, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.RequirementStatusID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("RequirementStatusID", null, "SELECT THE REQUIREMENT STATUS",
               htmlAttributes: new { @class = "form-control select2" })
                            @Html.ValidationMessageFor(model => model.RequirementStatusID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ImportanceID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("ImportanceID", null, "SELECT THE IMPORTANCE",
               htmlAttributes: new { @class = "form-control select2" })
                            @Html.ValidationMessageFor(model => model.ImportanceID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="col-lg-4">

                    <div class="form-group">
                        @Html.LabelFor(model => model.RequirementTypeID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("RequirementTypeID", null,
               "SELECT THE REQUIREMENT TYPE", htmlAttributes: new { @class = "form-control select2" })
                            @Html.ValidationMessageFor(model => model.RequirementTypeID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.RequirementSubTypeID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("RequirementSubTypeID",
               Enumerable.Empty<SelectListItem>(), "SELECT THE REQUIREMENT SUB TYPE",
               htmlAttributes: new { @class = "form-control select2" })
                            @Html.ValidationMessageFor(model => model.RequirementSubTypeID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.RequirementTemplateID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("RequirementTemplateID", Enumerable.Empty<SelectListItem>(),
               "SELECT THE REQUIREMENT TEMPLATE", htmlAttributes: new { @class = "form-control select2" })
                            @Html.ValidationMessageFor(model => model.RequirementTemplateID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    
                </div>

                <div class="col-lg-3">

                    <div class="form-group">
                        @Html.LabelFor(model => model.cost, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.cost, new { htmlAttributes = new { @class = "form-control money" } })
                            @Html.ValidationMessageFor(model => model.cost, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.startDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.startDate,
               new { htmlAttributes = new { @class = "form-control datepicker date", @placeHolder = "mm/dd/yyyy" } })
                            @Html.ValidationMessageFor(model => model.startDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.endDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.endDate,
               new { htmlAttributes = new { @class = "form-control datepicker date", @placeHolder = "mm/dd/yyyy" } })
                            @Html.ValidationMessageFor(model => model.endDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.rationale, 
                       new { htmlAttributes = new { @class = "form-control", @rows = 10, @style = "resize:none;", @placeHolder = "Requirement Initial Rationale" } })
                        @Html.ValidationMessageFor(model => model.rationale, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

        </div>
        <div id="des">
            <div class="form-horizontal">

                <div class="form-group">
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">

        $("#RequirementTypeID").change(function () {
            var id = $(this).val();
            clearDropDown("RequirementTemplateID");
            clearDropDown("RequirementSubTypeID");

            $('#RequirementTemplateID').append("<option value='" + 0 + "'>SELECT THE REQUIREMENT TEMPLATE</option>");
            $('#RequirementSubTypeID').append("<option value='" + 0 + "'>SELECT THE REQUIREMENT SUB TYPE</option>");

            $.getJSON('@Url.Action("GetTemplatesOfRequirementType", "RequirementTemplate")', { type: id }, function (response) {
                $.each(response, function (index, item) {
                    var optionExists = ($('#RequirementTemplateID option[value=' + item.RequirementTemplateID + ']').length > 0);
                    if (!optionExists)
                        $('#RequirementTemplateID').append("<option value='" + item.RequirementTemplateID + "'>" + item.description + "</option>");
                });
            });

            $.getJSON('@Url.Action("GetSubType", "RequirementSubType")', { type: id }, function (response) {
                $.each(response, function (index, item) {
                    var optionExists = ($('#RequirementSubTypeID option[value=' + item.RequirementSubTypeID + ']').length > 0);
                    if (!optionExists)
                        $('#RequirementSubTypeID').append("<option value='" + item.RequirementSubTypeID + "'>" + item.description + "</option>");
                });
            });
        });


        $("#RequirementTemplateID").change(function () {
            var id = $(this).val();
            $.getJSON('@Url.Action("GetTemplateHtml", "RequirementTemplate")', { id: id }, function (response) {
                tinyMCE.activeEditor.setContent(response.templateHtml);
            });
        });
    </script>

    <script src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script type="text/javascript">
        tinymce.init({
            selector: '#description',
            height: 350,
            menubar: false,
            plugins: [
              'advlist autolink lists link image charmap print preview anchor textcolor',
              'searchreplace visualblocks code fullscreen',
              'insertdatetime media table contextmenu paste code help'
            ],
            toolbar: 'insert | undo redo |  formatselect | bold italic backcolor  | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help',
            content_css: [
              '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
              '//www.tinymce.com/css/codepen.min.css']
        });
    </script>

}
